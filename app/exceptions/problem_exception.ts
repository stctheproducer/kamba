import { Exception } from '@adonisjs/core/exceptions'
import { HttpContext } from '@adonisjs/core/http'

// Define the structure based on RFC 7807
export interface ProblemDetails {
  type: string // A URI reference that identifies the problem type
  title: string // A short, human-readable summary of the problem
  status: number // The HTTP status code generated by the origin server for this occurrence of the problem
  detail?: string // A human-readable explanation specific to this occurrence of the problem
  instance?: string // A URI reference that identifies the specific occurrence of the problem
  [key: string]: any // Additional properties can be added as needed
}

export default class ProblemException extends Exception {
  static status = 500 // Default status code
  public type: string
  public title: string
  public detail?: string
  public instance?: string
  public extensions: Record<string, any> // For extension memebers

  /**
   * ProblemException constructor
   * @param title - A short, human-readable summary of the problem
   * @param detail - A human-readable explanation specific to this occurrence of the problem
   * @param type - A URI reference that identifies the problem type
   * @param instance - A URI reference that identifies the specific occurrence of the problem
   * @param status - The HTTP status code to be used for the response
   * @param extensions - Additional properties can be added as needed
   */
  constructor(
    title: string,
    type: string,
    detail?: string,
    instance?: string,
    status?: number,
    extensions: Record<string, any> = {}
  ) {
    super(detail || title, { status }) // Use detail for the base message, title for problem details
    const statusCode = status || (this.constructor as typeof ProblemException).status
    this.title = title
    this.detail = detail
    this.type = type || `https://httpstatuses.com/${statusCode}` // Default problem type
    this.instance = instance
    this.status = statusCode // Set instance status property
    this.extensions = extensions
  }

  /**
   * Custom handle method to render Problem Details response
   */
  async handle(error: this, ctx: HttpContext) {
    // Ensure instance defaults to request URL if not provided
    const instance = error.instance || ctx.request.url()

    const problemDetails: ProblemDetails = {
      type: error.type,
      title: error.title,
      status: error.status,
      detail: error.detail,
      instance: instance,
      ...error.extensions, // Include any extra details
    }

    // Set the Content-Type header
    ctx.response.header('Content-Type', 'application/problem+json')
    ctx.response.status(error.status).send(problemDetails)
  }
}
